AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Reel Project

  This is a wrapper API for the slate app, specifically for fetching and caching reel. 
  This can cache all the reels in an async manner in a dynomodb, and provide an API to retreive the cached reels.

Globals:
  Function:
    Timeout: 60
    Handler: app.lambda_handler
    Runtime: python3.9
    Layers: 
      - !Ref SharedLayer
    Environment:
      Variables:
        REGION: !Ref Region
        API_ENDPOINT: !Ref ApiEndpoint
        API_TOKEN: !Ref ApiToken

Parameters:
  ApiToken:
    Description: 'Required. Slate App API Key'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'REEL_API_KEY'
  ApiEndpoint:
    Description: 'Required. The Slate App API end point for all reel related information'
    Type: String
    Default: 'https://mofa.slateapp.com/api/v1/showreel/'
  Region:
    Description: 'Required. The region we all want to be in.'
    Type: String
    Default: 'ap-southeast-2'

Resources:
  # The shared library TODO: make this work
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/common/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  # Topic for pushing all the required reels to cache
  cacheTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt cacheReelFunction.Arn

  # Example of subscribing to a topic
  # cacheReelFunctionSubscription:
  #   Type: AWS::SNS::Subscription
  #   Properties:
  #     Endpoint: !GetAtt cacheReelFunction.Arn
  #     Protocol: lambda
  #     TopicArn: !Ref cacheTopic

  # Provide permission for SNS to invoke the Lambda function
  cacheReelFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref cacheReelFunction
      Principal: sns.amazonaws.com

  # The Topic consumer that caches the reels
  cacheReelFunction:
    Type: AWS::Serverless::Function
    DependsOn: cacheReelTable
    Properties:
      CodeUri: src/cache_reel/
      Environment:
        Variables:
          CACHE_TABLE: !Ref cacheReelTable
      Policies:
        DynamoDBWritePolicy:
          TableName: !Ref cacheReelTable

  # Policy to allow function to public topic
  cacheTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !Ref cacheTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref cacheTopic
            Principal:
              AWS: '*'
            Condition:
              ArnLike:
                AWS:SourceArn: !Sub cacheAllFunction.Arn

  # Where we store the cached reels
  cacheReelTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "reel_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "reel_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "ReelCache"

  # The API end point for retreival of reels
  getReelFunction:
    Type: AWS::Serverless::Function 
    DependsOn: cacheReelTable
    Properties:
      CodeUri: src/get_reel/
      Environment:
        Variables:
          CACHE_TABLE: !Ref cacheReelTable
      Events:
        getReel:
          Type: Api
          Properties:
            Path: /reel/{id}
            Method: get
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref cacheReelTable
  
  # The API end point for caching all reels
  cacheAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cache_all/
      Environment:
        Variables:
          CACHE_TOPIC_ARN: !Ref cacheTopic
      Policies:
        SNSPublishMessagePolicy:
          TopicName: !GetAtt cacheTopic.TopicName
      Events:
        getReel:
          Type: Api
          Properties:
            Path: /cache/
            Method: get

Outputs:
  CacheAPI:
    Description: "API Gateway endpoint URL for Prod stage to cache all reels function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cache"